" @author icollar
" @version 4.0
" @title vimrc
" @desc My own persional vimrc configuration
" ----------------------------------------------
scriptencoding utf-8
syntax on
let &titleold=getcwd()


" Basic Settings
" --------------
set title              " sets the terminal window title
set ruler              " shows current cursor position on lower right corner
set number             " show line numbers
set list               " lets list to show the tab and whitspace chars
set nowrap             " disables text wrapping
set incsearch          " searches for text as typed
set showmatch          " jumps briefly to brace/parenthese/brackets match of current block when closing brace typed
set ignorecase         " ignores case sensitivity when searching
set smartcase          " overrides 'ignorecase' when searching with capitals
set wildmenu           " this enables code completion
set ttyfast            " says we have a fast terminal, means more characters are passed back and forth"
set hlsearch           " enable search highlighting
set nocompatible       " enable compatiblity
set showcmd            " shows aritalliy the command in the bottom right of screen
set nobackup           " disables backup of files
set noswapfile         " disables use of swap files
set nowritebackup      " disables more backup stuff
set splitright         " vsplit file opens on the right
set splitbelow         " split file opens below
set nofoldenable       " Disable folding
set noexpandtab        " disable conversion of tabs to spaces
set shiftround         " round indent to multiple of 'shiftwidth'


" Assignments
" -----------
set encoding=utf-8              " Ensure correct encoding
set history=256                 " Set a sensible history limit
set timeoutlen=250              " Change wait time after ESC, default can be a pain
set laststatus=2                " shows indenting and line numers by defualt
set shiftwidth=4                " number of spaces to use for each setp of (auto)indent
set softtabstop=4               " TODO not sure but handy
set tabstop=4                   " set 1 tab to be equal to this many spaces
set listchars=tab:>\ ,trail:.   " show tabs and trailing whitespace
set t_Co=256                    " sets the number of colours
set completeopt=menuone,longest " for code completion always show the menu and longest match first
set scrolloff=0                 " sets scrolling offset x lines before beginning or end
set backspace=indent,eol,start  " allow backspacing over everything in insert mode
set mouse=a                     " default mouse on
set ttymouse=xterm2             " mouse xterm settings
set textwidth=0                 " Don't wrap lines by default


" Stop stupid python settings
autocmd FileType python setlocal tabstop=4
autocmd FileType python setlocal noexpandtab


" Custom Functions
" ----------------

command HWS /\s\+$\|^\(\t* \+\t*\)\+\|\(^\t*\)\@<!\(\s*\t\s*\)

hi WhiteSpace cterm=NONE ctermbg=NONE ctermfg=4 guibg=NONE guifg=White
match WhiteSpace /\s\+$\|^\(\t* \+\t*\)\+\|\(^\t*\)\@<!\(\s*\t\s*\)/

nmap <silent> <Leader>l ml:execute 'match Search /\%'.line('.').'l/'<CR>
nmap <silent> <Leader>k ml:execute 'match'<CR>
nmap <silent> <Leader>m ml:call ToggleMouse()<CR>
nmap <silent> <Leader>s ml:call ToggleWhitespace()<CR>
nmap <silent> <Leader>h :set hlsearch!<CR>
nmap <silent> <Leader>w :HWS<CR>
nmap <silent> <leader>t :TagbarToggle<CR>
nmap <silent> <A-Up>    :wincmd k<CR>
nmap <silent> <A-Down>  :wincmd j<CR>
nmap <silent> <A-Left>  :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>

let g:SuperTabDefaultCompletionType = "context"
let g:tagbar_usearrows = 1

imap <NUL> <Space>
map <C-Z> <Nop>

let g:togglewhite = 'a'
function! ToggleWhitespace()
	if g:togglewhite == 'a'
		hi WhiteSpace cterm=NONE ctermbg=red ctermfg=NONE guibg=red guifg=NONE
		let g:togglewhite = ''
	else
		hi WhiteSpace cterm=NONE ctermbg=NONE ctermfg=4 guibg=NONE guifg=Blue
		let g:togglewhite = 'a'
	endif
endfunction

function! ToggleMouse()
	set list! number!
	if &mouse == 'a'
		set mouse=
	else
		set mouse=a
	endif
endfunction


" Remember where we were last time
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" PLUGIN Configuration
" --------------------

" Airline
let g:airline_theme                           = 'powerlineish'
let g:airline_powerline_fonts                 = 1
let g:airline_whitespace_detect               = 0
let g:airline#extensions#tabline#enabled      = 1
let g:airline#extensions#tabline#left_sep     = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

if ! has('gui_running')
	set ttimeoutlen=10
	augroup FastEscape
		autocmd!
		au InsertEnter * set timeoutlen=0
		au InsertLeave * set timeoutlen=1000
	augroup END
endif

" SuperTab
let g:SuperTabMappingForward   = '<nul>'
let g:SuperTabMappingBackward  = '<s-nul>'
let g:omni_sql_no_default_maps = 1
let g:brac                     = 0

" Setting up Vundle - the vim plugin bundler
let vundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
	echo "Installing Vundle.."
	echo ""
	silent !mkdir -p ~/.vim/bundle
	silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
	let vundle=0
endif



" Vundle Setup
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Plugin 'gmarik/vundle'
Plugin 'airblade/vim-gitgutter'
Plugin 'bling/vim-airline'
Plugin 'chase/vim-ansible-yaml'
Plugin 'icollar/vim-colorschemes'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'ervandew/supertab'
Plugin 'godlygeek/tabular'
Plugin 'lunaru/vim-less'
Plugin 'majutsushi/tagbar'
Plugin 'othree/html5.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'

if vundle == 0
	echo "Installing Bundles, please ignore key map error messages"
	echo ""
	:BundleInstall
endif


" End of Vundle
filetype plugin indent on
colorscheme moose

