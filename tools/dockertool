#!/bin/bash
# -------------------------------------
# @author  icollar
# @version 1.2
# @title   dockertool
# @desc    handy tool to shortcut build
#          run, cleaning up, etc..
# -------------------------------------
#
# The following are configurations that should
# be added to the top an images Dockerfile.
#
# REPOSITORY - repository the image will be saved to
# OS         - use if you want to specify the original OS
#              e.g. centos/rhel/ubuntu/debian
# TYPE       - which kind of image is this?
#                - BASE - image that acts as a base image for apps
#                - APP  - image for running and application
#                - DB   - image for running databases
#                - ENV  - images for simulating environments; developemt/tools
#                * leave blank if this is THE base image for the OS
# IMAGE      - name of the image
# VERSION    - current version of the image
# PUBLISH    - comma seperated list of ports
# VOLUME     - comma seperated list of volumes
# LINK       - comma seperated list of linked containers
# HOSTNAME   - hostname for the image to take at runtime
# NAME       - name of the container
# WORKDIR    - starting working directory at runtime

# Configuration should be supplied in the exact format.
# Only configures between the two '#>--' lines will be parsed.

# Example configuration
#>---------------------------------
# REPOSITORY : some.repo.com
# OS         : centos
# TYPE       : app
# IMAGE      : dev-environment
# VERSION    : 1.3
# PUBLISH    : 10022:22,8080
# VOLUME     : /home:/home/dev
# LINK       : db01:db
# HOSTNAME   : dev01
# NAME       : dev
# WORKDIR    : /home/dev
#>---------------------------------

# Configurations
config_multi="publish volume link"
config_single="hostname name workdir user net entrypoint"
docker_version=$(docker --version | awk -F" |," '{print $3}')
docker_v_major=$(echo ${docker_version} | awk -F\. '{print $1}')
docker_v_minor=$(echo ${docker_version} | awk -F\. '{print $2}')
docker_v_patch=$(echo ${docker_version} | awk -F\. '{print $3}')

# Handle backwards compatibility
if [ ${docker_v_major} -ge 1 -a ${docker_v_minor} -ge 5 ]; then
	# Enable docker build -f compatibility
	FUNC_BUILD_FILENAME=true
fi


# Temporary hack... just don't ask
export SYSUSER=${USER}
export SYSHOST=${HOSTNAME}
export HOSTNAME=
export USER=

function usage () {
	echo "Usage: $0 COMMAND [OPTIONS] [OVERRIDES]"
	echo ""
	echo "  OPTIONS:"
	echo "    -i - if the container name is already in use; add a post-fix id"
	echo "    -q - prints the command only (run, build)"
	echo "    -v - verbose"
	echo ""
	echo "  COMMANDS:"
	echo "    -r, --run    <Dockerfile>? <args> - run an image"
	echo "    -b, --build  <Dockerfile>?        - build from the dockerfile"
	echo "    -s, --squash <Dockerfile>?        - squash an image"
	echo "    -x, --save   <Dockerfile>?        - save an image"
	echo "    -i, --images <filter>             - list local images"
	echo "    -c, --clean                       - cleans up the docker daemon. Removes untagged images and exited containers"
	echo "    -p, --purge                       - Kills ALL containers"
	echo "    -h, --help                        - help"
	exit 1
}


# Helper function to run commands
function run () {
	echo "Executing: $@"
	tmp=".___dktooltpm___"
	RES="<ID>"
	if ${EXEC} ; then
		eval $@ 2>&1 | tee -a ${tmp}
		RES=$(cat ${tmp})
		rm ${tmp}
	fi
	export RES
}


# Remove all containers
# ---------------------
function docker_purge () {
	containers=$(docker ps -a -q)
	echo "Removing $(echo ${containers}| wc -w) container(s)"
	for container in ${containers}; do
		docker rm -f ${container}
	done
	unset containers
}


# Remove all untagged images
# --------------------------
function docker_clean () {
	containers=$(docker ps -a -q -f status=exited)
	echo "Removing $(echo ${containers} | wc -w) container(s)"
	for container in ${containers}; do
		docker rm ${container}
	done

	images=$(docker images -q -f dangling=true)
	echo "Removing $(echo ${images} | wc -w) images(s)"
	for image in ${images}; do
		docker rmi ${image}
	done
	unset container containers image images
}


# List images. sort and filter
# ----------------------------
function docker_images () {
	filter=${1:-*}
	docker images |
		sed '1d' |
		sort |
		grep -E "${filter}" |
		grep -vE "latest|none|flat"
}


# Parse the Dockerfile as config
# ------------------------------
function _parse_dockerfile () {

	# Must be in a directory with a Dockerfile
	if [ ! -f "$1" ]; then
		echo "Cannot find $1... exiting"
		usage
		exit 1
	fi

	if [ $(grep '#>--' $1 | wc -l) -ne 2 ]; then
		echo "Configuration cannot be found..."
		echo "must be placed in comments between two lines matching '#>--'"
		exit 1
	fi

	# Dockerfile exists, then parse the configuration
	# located at the top of the file...
	source <(
		sed -n "/#>--/,/#>--/p" $1 |
		sed 's/#\s*\([a-zA-Z]\+\)[ \t:]*/export \U\1\E=/'
	)
}


# Build the image path
# --------------------
function _image_path () {

	IMAGE_PATH=
	if [ -n "${REPOSITORY}" ]; then
		IMAGE_PATH+=${REPOSITORY}/
	fi

	if [ -n "${OS}" ]; then
		IMAGE_PATH+=${OS}/
	fi

	if [ -n "${TYPE}" ]; then
		LTYPE=$(echo ${TYPE} | sed 's/\(.*\)/\L\1\E/')
		if ! echo ${LTYPE} | grep -qE "^base$|^app$|^db$|^env$" ; then
			echo "${TYPE} is not a valid type. Must be either 'base', 'app', 'db', or 'env'"
			exit 1
		fi
		IMAGE_PATH+=${LTYPE}.
	fi

	if [ -z "${IMAGE}" ]; then
		echo "IMAGE config not set in Dockerfile"
		exit 1
	fi

	IMAGE_PATH+=${IMAGE}
}


# Construct a build command
# -------------------------
function docker_build () {

	FILE=Dockerfile
	DOCKERFILE=
	CACHE=

	# Available in 1.5.0 and later
	if [ ${FUNC_BUILD_FILENAME} -a -f "$1" ]; then
		FILE=$1
		DOCKERFILE="-f ${FILE}"
	fi

	if ${NOCACHE} ; then
		CACHE="--no-cache=true"
	fi

	_parse_dockerfile ${FILE}
	_image_path

	run "sudo docker build ${CACHE} -t ${IMAGE_PATH}:${VERSION:-latest} ${DOCKERFILE} ."

	if [ "${TYPE}" != "db" ]; then
		if [ "${RES}" != "<ID>" ]; then
			if [ ${VERSION:-latest} != "latest" -a ${VERSION:-latest} != "dev" ]; then
				echo "Tagging as latest"
				run "docker tag -f ${IMAGE_PATH}:${VERSION} ${IMAGE_PATH}"
			fi
		fi
	fi
}


# Construct a run command
# -----------------------
function docker_run () {

	FILE=Dockerfile
	if [ -f "$1" ]; then
		FILE=$1
		shift
	fi

	_parse_dockerfile ${FILE}
	_image_path

	# Source the configuration
	source <(echo $@ | sed 's/--\([a-zA-Z]\+\)\s*/\nexport \U\1\E=/g')

	COMMAND="docker run -ti"

	# Binds up any repeatable configuration
	for config in ${config_multi}
	do
		# Look through the comma seperated list
		local IFS=','
		CFG=$(echo ${config} | sed 's/\(.*\)/\U\1\E/')
		if [ -n "${!CFG}" ]; then
			for value in ${!CFG} ; do

				# Check if the linked container actually exists
				if [ "${CFG}" == "LINK" ]; then
					link=$(echo ${value} | sed 's/:.*$//')
					count=$(docker ps | sed '1d' | awk '{print $NF}' | grep -cE "^${link}$")
					if [ ${count} -ne 1 ]; then
						echo "WARNING: Linking container ${link} has not been detected"
						exit 1
					fi
					unset count
				fi

				COMMAND+=" --${config} ${value}"
				if ! echo ${value} | grep -q : ; then
					COMMAND+=":${value}"
				fi
			done
		fi

		# Reset the Internal Field Seperator
		unset IFS
	done

	# Bind up singluar configuration
	for config in ${config_single}
	do
		CFG=$(echo ${config} | sed 's/\(.*\)/\U\1\E/')
		if [ -n "${!CFG}" ]; then

			# Special handling for NAME since dockers error handling is... well
			if [ "${CFG}" == "NAME" ]; then
				# How many containers are already running?
				count=$(docker ps --all | sed '1d' | awk '{print $NF}' | grep -cE "^${!CFG}(-[0-9])*$")
				if [[ ${count} -gt 0 && ! ${POSTFIX} ]];then
					echo "WARNING: A container is already running with the name: ${NAME}"
					exit 1
				elif [[ ${count} -gt 0 && ${POSTFIX} ]];then
					# POSTFIX is enabled rename the container instance by postfixing the current count
					export NAME="${NAME}-${count}"
				fi
				unset count
			fi

			COMMAND+=" --${config} ${!CFG}"
		fi
	done

	# ENV works differently...
	IFS=,
	for value in ${ENV} ; do
		COMMAND+=" --env ${value}"
	done
	unset IFS

	COMMAND+=" ${IMAGE_PATH}:${VERSION}"

	run ${COMMAND}
}


# Save the docker image matching the current dir Dockerfile
# ---------------------------------------------------------
function docker_save () {

	# Double checking that the images has been built recently
	echo "Build an up-to-date image"
	docker_build $@

	FILE=Dockerfile
	if [ -f "$1" ]; then
		FILE=$1
		shift
	fi

	_parse_dockerfile ${FILE}
	_image_path

	FILENAME=$(basename ${IMAGE_PATH}-${VERSION}).tar

	run "docker save -o ${FILENAME} ${IMAGE_PATH}:${VERSION}"
	run gzip ${FILENAME}
}


# Squash a docker image...
# stupid layering (will be better once ADD/COPY can be USER specified
# -------------------------------------------------------------------
function docker_squash () {

	# Double checking that the images has been built recently
	echo "Build an up-to-date image"
	docker_build $@

	FILE=Dockerfile
	if [ -f "$1" ]; then
		FILE=$1
		shift
	fi

	_parse_dockerfile ${FILE}
	_image_path

	# Create a container and use the export/import trick
	run "docker create ${IMAGE_PATH}:${VERSION}"
	run "docker export ${RES} | docker import -"
	run "docker tag -f ${RES} ${IMAGE_PATH}:${VERSION}-flat"
}


# Check arguments for the correct number
if [[ $# -lt 1 ]]; then
	usage
fi

POSTFIX=false
EXEC=true
VERBOSE=false
NOCACHE=false

opt=$1
shift

#  parse options
for param in $*
do
	case ${param} in
		-i) POSTFIX=true;;
		-q) EXEC=false;;
		-v) VERBOSE=true;;
		-n) NOCACHE=true;;
		*)  break;;
	esac
	shift
done

# What command to run...
case ${opt} in
	-r|--run)    docker_run    $@;;
	-b|--build)  docker_build  $@;;
	-i|--images) docker_images $@;;
	-s|--squash) docker_squash $@;;
	-x|--save)   docker_save   $@;;
	-c|--clean)  docker_clean;;
	-p|--purge)  docker_purge;;
	*) usage;;
esac
